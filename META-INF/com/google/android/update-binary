#!/sbin/sh
# Author: cjybyjk (cjybyjk@gmail.com)
# auto-chosen script for flashing Project WIPE
# supported platform: any supported in Project WIPE

OUTFD=$2
ZIP=$3
exitcode=0

# Detect whether in boot mode
ps | grep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true
$BOOTMODE || id | grep -q 'uid=0' || BOOTMODE=true

ui_print() {
	$BOOTMODE && echo "$1" || echo -e "ui_print $1\nui_print" >> /proc/self/fd/$OUTFD
}

# $1:file $2:add head
wipe_write() {
	writefile=$1
	if [ "$2" == "1" ]; then
		echo "#!/system/bin/sh" > "$writefile"
		chmod 0755 "$writefile"
	fi
	cat ./common/runWIPE.sh >> "$writefile"
}

ui_print " "
ui_print "**************************"
ui_print "  Project WIPE installer"
ui_print "  Authors:"
ui_print "  Project WIPE: yc9559"
ui_print "  ZIP flashable: cjybyjk"
ui_print "   Version: user_custom"
ui_print "**************************"
ui_print " "

TMPDIR=/dev/tmp

ui_print "- Mounting /system, /vendor and /data"
mount /system
mount /vendor
mount /data

ui_print "- Extracting files"
mkdir -p $TMPDIR
cd $TMPDIR
unzip -o "$ZIP" > /dev/null

ui_print "- Installing..."
ui_print "- Checking Magisk Framework"
magiskFlag=0
[ -d "/data/adb/magisk" ] && magiskFlag=1
[ -f "/data/magisk.img" ] && magiskFlag=2
[ -f "/data/adb/magisk.img" ] && magiskFlag=3
[ -f /wipe_nomagisk ] && magiskFlag=0
ui_print "- Magisk flag: $magiskFlag"
if [ 0 -eq $magiskFlag ]; then
	flagBootApply=0
	mkdir ./mountimg
	while read lineinText
	do 
		fileFormat=`echo $lineinText | awk '{print \$1}'`
		pathtofile=`echo $lineinText | awk -F \" '{print \$2}'`
		bootinIMG=`echo $lineinText | awk -F \" '{print \$4}'`
		pathinIMG=`echo $lineinText | awk -F \" '{print \$6}'`
		case "$fileFormat" in
		"[D]" )
			if [ -d "$pathtofile" ]; then
				ui_print "  $pathtofile found, creating file on it..."
				wipe_write "$pathtofile/99prjwipe" 1
				flagBootApply=1
				ui_print "  copying powercfg to system/bin"
				cp ./powercfg /system/bin/powercfg
				chmod 0755 /system/bin/powercfg
				break
			fi
		;;
		"[F]" )
			if [ -f "$pathtofile" ]; then
				# restore backup
				if [ -f "$pathtofile.wipebak" ]; then
					rm -f "$pathtofile"
					cp "$pathtofile.wipebak" "$pathtofile"
				else
					cp "$pathtofile" "$pathtofile.wipebak"
				fi
				ui_print "  $pathtofile found, adding lines to it..."
				wipe_write "$pathtofile" 0
				flagBootApply=1
				ui_print "  copying powercfg to system/bin"
				cp ./powercfg /system/bin/powercfg
				chmod 0755 /system/bin/powercfg
				break
			fi
		;;
		"[I]" )
			if [ -f "$pathtofile" ]; then
				ui_print "  $pathtofile found, mounting..."
				mount "$pathtofile" ./mountimg
				if [ -d ./mountimg/$pathinIMG ]; then
					ui_print "  copying powercfg to $pathinIMG..."
					cp ./powercfg ./mountimg/$pathinIMG/powercfg
					chmod 0755  ./mountimg/$pathinIMG/powercfg
				else
					ui_print "  copying powercfg to system/bin"
					cp ./powercfg /system/bin/powercfg
					chmod 0755 /system/bin/powercfg
				fi
				ui_print "  creating file on $bootinIMG..."
				wipe_write "./mountimg/$bootinIMG/99prjwipe" 1
				flagBootApply=1
				ui_print "  Unmounting $pathtofile"
				umount ./mountimg
				break
			fi
		;;
		esac
	done < ./common/list_of_bootable
	[ 0 -eq $flagBootApply ] && ui_print "! WARNING: No method to apply on boot!"
else
	ui_print "- Magisk Framework found"
	ui_print "  Copying files..."
	mkdir -p ./magisk/system/bin/
	while read pathtofile
	do
		filepath=${pathtofile%/*}
		if [ -f "/$pathtofile" ]; then
			mkdir -p ./magisk/$filepath
			cp /$pathtofile ./magisk/$pathtofile
			[ `grep -c "Project WIPE support" ./magisk/$pathtofile` -eq 0 ] && wipe_write "./magisk/$pathtofile" 0
		fi
	done < ./common/list_of_magisk
	cp ./powercfg ./magisk/system/bin/powercfg
	ui_print "  Running install script"
	sh ./magisk_install/magisk-script $1 $2 $3 $PWD
	exitcode=$?
	if [ 0 -ne $exitcode ]; then
		ui_print "! WARNING: Magisk install script return $exitcode"
	fi
fi

ui_print "- Linking powercfg to /data"
[ -L "/data/powercfg" ] && rm /data/powercfg
ln -s /system/bin/powercfg /data/powercfg
ui_print "- Default mode: balance"
[ ! -f "/sdcard/wipe_mode" ] && echo "balance" > /sdcard/wipe_mode
ui_print "- You can choose mode by using this two ways:"
ui_print "  1. Enter powercfg \$MODE in terminal"
ui_print "  2. Modify wipe_mode in your sdcard and reboot"

ui_print "- Cleaning files"
cd /
rm -rf $TMPDIR

ui_print "- Unmouting /system, /vendor"
umount /system
umount /vendor

ui_print "- Done!"
exit $exitcode
