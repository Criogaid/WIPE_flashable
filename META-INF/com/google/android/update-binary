#!/sbin/sh
# auto-chosen script for flashing Project WIPE
# supported platform: any supported in Project WIPE

ui_print() {
    echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
    echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
}

is_mounted() {
    if [ ! -z "$2" ]; then
        cat /proc/mounts | grep $1 | grep $2, >/dev/null
    else
        cat /proc/mounts | grep $1 >/dev/null
    fi
    return $?
}

toolbox_mount() {
    RW=rw
    if [ ! -z "$2" ]; then
        RW=$2
    fi

    DEV=
    POINT=
    FS=
    for i in `cat /etc/fstab | grep "$1"`; do
        if [ -z "$DEV" ]; then
            DEV=$i
        elif [ -z "$POINT" ]; then
            POINT=$i
        elif [ -z "$FS" ]; then
            FS=$i
            break
        fi
    done
    if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT; fi
    if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT; fi

    DEV=
    POINT=
    FS=
    for i in `cat /etc/recovery.fstab | grep "$1"`; do
        if [ -z "$POINT" ]; then
            POINT=$i
        elif [ -z "$FS" ]; then
            FS=$i
        elif [ -z "$DEV" ]; then
            DEV=$i
            break
        fi
    done
    if [ "$FS" = "emmc" ]; then
        if (! is_mounted $1 $RW); then mount -t ext4 -o $RW $DEV $POINT; fi
        if (! is_mounted $1 $RW); then mount -t ext4 -o $RW,remount $DEV $POINT; fi
        if (! is_mounted $1 $RW); then mount -t f2fs -o $RW $DEV $POINT; fi
        if (! is_mounted $1 $RW); then mount -t f2fs -o $RW,remount $DEV $POINT; fi
    else
        if (! is_mounted $1 $RW); then mount -t $FS -o $RW $DEV $POINT; fi
        if (! is_mounted $1 $RW); then mount -t $FS -o $RW,remount $DEV $POINT; fi
    fi
}

remount_system_rw() {
    if (! is_mounted /system rw); then mount -o rw,remount /system; fi
    if (! is_mounted /system rw); then mount -o rw,remount /system /system; fi
    if (! is_mounted /system rw); then toolbox_mount /system; fi
}

get_prop() {
    # use echo to replace return
    echo $(lcasechar `getprop "$1"`)
}

lcasechar() {
    lowercase=$(echo $* | tr '[A-Z]' '[a-z]')
    # use echo to replace return
    echo $lowercase
}

get_platform() {
    case "$1" in
        # Qualcomm Snapdragon
        "msm8939" ) platform="sd_615_616";;
        "msm8953" ) platform="sd_625_626";;
        "sdm636" ) platform="sd_636";;
        "msm8976" | "msm8956" ) platform="sd_652_650";;
        "sdm660" ) platform="sd_660";;
        "msm8974" | "apq8084" ) platform="sd_801_800_805";;
        "msm8994" | "msm8992" ) platform="sd_810_808";;
        "msm8996" ) platform="sd_820_821";;
        "msm8998" ) platform="sd_835";;
        # Mediatek
        "mt6795" ) platform="helio_x10";;
        "mt6797" ) platform="helio_x20_x25";;
        # Intel Atom
        "moorefield" ) platform="atom_z3560_z3580";;
        # Samsung Exynos
        "universal8890" ) platform="exynos_8890";;
        "universal8895" ) platform="exynos_8895";;
        # Hwawei Kirin
        "hi3650" ) platform="kirin_950_955";;
        "hi3660" ) platform="kirin_960";;
        "hi3670" ) platform="kirin_970";;
    esac
    # use echo to replace return
    echo $platform
}

OUTFD=$2
ZIP=$3

ui_print " "
ui_print "**************************"
ui_print "  Project WIPE installer"
ui_print "  Authors:"
ui_print "  Project WIPE: yc9559"
ui_print "  ZIP flashable: cjybyjk"
ui_print "     Version: 180603"
ui_print "**************************"

# get platform
platform="unsupported"
platformA=$(lcasechar `grep "Hardware" /proc/cpuinfo | awk '{print \$NF}'`)
platformB=$(get_prop "ro.product.board")
platformC=$(get_prop "ro.board.platform")
platform=$(get_platform $platformA)
platform=$(get_platform $platformB)
platform=$(get_platform $platformC)

ui_print "- Mounting /system"
    remount_system_rw

ui_print "- Extracting files"
    mkdir /tmp/WIPE
    cd /tmp/WIPE
    unzip -o "$ZIP"

# list of files allow to append if device unsupport init.d
fileList=`cat ./appendable_file_list`

ui_print "- Platform: $platform"
    if [ -d "./platforms/$platform/" ]; then
        # Show notice when flashing
        if [ -f "./platforms/$platform/NOTICE" ]; then
            ui_print "- NOTICE:"
            ui_print "  `cat ./platforms/$platform/NOTICE`"
        fi
        ui_print "- Copying files"
            cp ./platforms/$platform/powercfg.apk /system/xbin/powercfg
            chmod 0755 /system/xbin/powercfg
            if [ -d /system/etc/init.d ]; then
                ui_print "  init.d found, creating file on it..."
                    echo "#!/system/bin/sh" > /system/etc/init.d/99prjwipe
                    echo "# Project WIPE support" >> /system/etc/init.d/99prjwipe
                    echo "/system/xbin/powercfg \`cat /sdcard/wipe_mode\`" >> /system/etc/init.d/99prjwipe
                    chmod 0755 /system/etc/init.d/99prjwipe
            else
                for file in $fileList 
                do
                    if [ -f "$file" ]; then
                        # restore backup
                        if [ -f "$file.wipebak" ]; then
                            rm -f "$file"
                            cp "$file.wipebak" "$file"
                        else
                            cp "$file" "$file.wipebak"
                        fi
                        ui_print "  $file found, adding lines to it..."
                            echo "# Project WIPE support" >> $file
                            echo "/system/xbin/powercfg \`cat /sdcard/wipe_mode\`" >> $file
                        break
                    fi
                done
            fi
        ui_print "- Default mode: balance"
            if [ ! -f "/sdcard/wipe_mode" ]; then
                echo "balance" > /sdcard/wipe_mode
            fi
            ui_print "- You can choose mode by using this two ways:"
            ui_print "  1. Enter powercfg \$MODE in terminal"
            ui_print "  2. Modify wipe_mode in your sdcard and reboot"
    else
        ui_print "- Unsupported device!"
    fi

ui_print "- Cleaning files"
    cd /
    rm -rf /tmp/WIPE

ui_print "- Unmouting /system"
    umount /system

ui_print "- Done!"
